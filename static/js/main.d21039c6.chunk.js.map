{"version":3,"sources":["redux/snakeReducer.js","utils/validators.js","redux/types.js","components/SnakeField/Snake/PieceOfSnake/PieceOfSnake.jsx","components/SnakeField/Snake/Snake.jsx","components/SnakeField/Target/Target.jsx","components/SnakeField/GameOver/ScoreNameForm/InputName/InputName.jsx","components/SnakeField/GameOver/ScoreNameForm/ScoreNameForm.jsx","components/SnakeField/GameOver/GameOver.jsx","api/api.js","redux/scoreReducer.js","components/SnakeField/Field.jsx","components/Header/Header.jsx","components/Alert/Alert.jsx","components/ScoreBoard/Buddy/Buddy.jsx","components/ScoreBoard/ScoreBoardModal.jsx","components/ScoreBoard/ScoreBoardContainer.jsx","App.js","serviceWorker.js","redux/store.js","index.js","assets/img/apple.png"],"names":["timer","len","initState","step","field","width","height","pieces","id","coor","left","top","bg","direction","gameOver","target","goal","snakeReducer","state","action","headCoor","find","item","type","lock","map","prevCoor","GO","filter","length","targetCoor","isCoor","Math","random","forEach","tailCoor","setTarget","props","style","backgroundColor","className","snake","PieceOfSnake","key","src","appleImg","alt","required","value","undefined","input","meta","touched","error","role","disabled","minLength3","reduxForm","form","onSubmit","handleSubmit","Field","component","InputName","placeholder","name","validate","aria-label","aria-describedby","score","points","values","sendScore","initTimer","onClick","instance","axios","baseURL","scoreAPI","post","get","then","response","data","scoreReducer","scoreBoard","sort","a","b","i","pos","FieldContainer","handleOnKeyDown","event","setDirection","this","stopTimer","setScore","tabIndex","onKeyDown","autofocus","Snake","Target","GameOver","React","Component","connect","dispatch","setInterval","clearInterval","data-dismiss","aria-hidden","aria-labelledby","Buddy","ScoreBoardContainer","getScoreBoard","data-toggle","data-target","ScoreBoardModal","setScoreBoard","Object","App","Header","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.d21039c6.chunk.js","sourcesContent":["import { MOVE_SNAKE_AC, SET_DIRECTION, CHECK_GAME_OVER, SET_TARGET, CHECK_TARGET, RESET_SNAKE } from './types';\r\n\r\nconst initState = {\r\n    step: 50,\r\n    field: { width: 750, height: 500 },\r\n\r\n    pieces: [\r\n        { id: 0, coor: { left: 100, top: 100 }, bg: 'rgb(27, 146, 37)' },\r\n        { id: 1, coor: { left: 50, top: 100 } },\r\n        { id: 2, coor: { left: 0, top: 100 } }\r\n    ],\r\n\r\n    direction: 'right',\r\n    gameOver: false,\r\n    target: {\r\n        // background: 'appleImg',\r\n        goal: false\r\n    }\r\n}\r\n\r\nconst snakeReducer = (state = initState, action) => {\r\n    let headCoor = state.pieces.find(item => item.id === 0).coor;\r\n\r\n    switch (action.type) {\r\n        case MOVE_SNAKE_AC:\r\n            let coor = {};\r\n\r\n            return {\r\n                ...state,\r\n                lock: false,\r\n                pieces: state.pieces.map(item => {\r\n                    if (!item.id) {\r\n                        coor = { ...item.coor }\r\n\r\n                        switch (state.direction) {\r\n                            case 'right': item.coor.left += state.step; break;\r\n                            case 'up': item.coor.top -= state.step; break;\r\n                            case 'down': item.coor.top += state.step; break;\r\n                            case 'left': item.coor.left -= state.step; break;\r\n                            default: return state;\r\n                        }\r\n                    } else {\r\n                        let prevCoor = { ...item.coor };\r\n                        item.coor = { ...coor };\r\n                        coor = { ...prevCoor }\r\n                    }\r\n\r\n                    return item;\r\n                })\r\n            }\r\n\r\n        case RESET_SNAKE:\r\n            return {\r\n                ...initState,\r\n                pieces: [\r\n                    { id: 0, coor: { left: 100, top: 100 }, bg: 'rgb(27, 146, 37)' },\r\n                    { id: 1, coor: { left: 50, top: 100 } },\r\n                    { id: 2, coor: { left: 0, top: 100 } }]\r\n            }\r\n\r\n        case SET_DIRECTION:\r\n            if ((action.direction === \"left\" && state.direction === \"right\") ||\r\n                (action.direction === \"right\" && state.direction === \"left\") ||\r\n                (action.direction === \"up\" && state.direction === \"down\") ||\r\n                (action.direction === \"down\" && state.direction === \"up\")) return state;\r\n\r\n            return {\r\n                ...state,\r\n                lock: true,\r\n                direction: action.direction\r\n            }\r\n\r\n        case CHECK_GAME_OVER:\r\n            let GO = false;\r\n\r\n            if (headCoor.left + state.step > state.field.width || headCoor.left < 0 ||\r\n                headCoor.top + state.step > state.field.height || headCoor.top < 0 ||\r\n                state.pieces.filter(item => { /* check snake body coors === target coors */\r\n                    if (!item.id) return false;\r\n                    return (item.coor.top === headCoor.top && item.coor.left === headCoor.left) ? true : false;\r\n                }).length ||\r\n                state.field.width * state.field.height / state.step ** 2 === state.pieces.length  /* check win */) GO = true;\r\n\r\n            return !GO ? state : {\r\n                ...state,\r\n                gameOver: true\r\n            }\r\n\r\n        case SET_TARGET:\r\n            let isCoor = false, targetCoor;\r\n\r\n            while (!isCoor && !state.gameOver) {\r\n                isCoor = true;\r\n\r\n                targetCoor = {\r\n                    left: ~~(Math.random() * state.field.width / state.step) * state.step,\r\n                    top: ~~(Math.random() * state.field.height / state.step) * state.step\r\n                };\r\n\r\n                state.pieces.forEach(item => {\r\n                    if (targetCoor.left === item.coor.left && targetCoor.top === item.coor.top) isCoor = false;\r\n                })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                target: {\r\n                    ...state.target,\r\n                    goal: false,\r\n                    coor: { ...targetCoor }\r\n                }\r\n            }\r\n\r\n        case CHECK_TARGET:\r\n            if (!state.target.coor) return state;\r\n\r\n            const tailCoor = state.pieces.find( item => item.id === state.pieces.length-1).coor;\r\n\r\n            return (headCoor.top === state.target.coor.top && headCoor.left === state.target.coor.left) ? {\r\n                ...state,\r\n                pieces: [\r\n                    ...state.pieces,\r\n                    { id: state.pieces.length, coor: { ...tailCoor } } // create new piece of snake\r\n                ],\r\n                target: {\r\n                    ...state.target,\r\n                    goal: true\r\n                }\r\n            } : state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default snakeReducer;\r\n\r\nlet moveSnake = () => ({ type: MOVE_SNAKE_AC })\r\nlet resetSnake = () => ({ type: RESET_SNAKE })\r\nexport let setDirection = (direction) => ({ type: SET_DIRECTION, direction })\r\nlet checkGameOver = () => ({ type: CHECK_GAME_OVER })\r\nexport let setTarget = () => ({ type: SET_TARGET })\r\nlet checkTarget = () => ({ type: CHECK_TARGET })\r\n\r\n\r\nexport const initTimer = () => dispatch => {\r\n    dispatch(resetSnake());\r\n    dispatch(setTarget());\r\n\r\n    timer = setInterval(() => {\r\n        dispatch(moveSnake())\r\n\r\n        dispatch(checkGameOver())\r\n        dispatch(checkTarget())\r\n    }, 500)\r\n}\r\n\r\nexport const stopTimer = () => dispatch => {\r\n    clearInterval(timer);\r\n}\r\n\r\nlet timer;","export const required = value => value ? undefined : \"Field is empty\" \r\n\r\nexport const minLength = len => value =>\r\n    (value && value.length < len) ? `Min length is ${len} symbols` : undefined;","export const MOVE_SNAKE_AC = 'MOVE_SNAKE_AC';\r\nexport const RESET_SNAKE = 'RESET_SNAKE';\r\nexport const SET_DIRECTION = 'SET_DIRECTION';\r\nexport const CHECK_GAME_OVER = 'CHECK_GAME_OVER';\r\nexport const SET_TARGET = 'SET_TARGET';\r\nexport const CHECK_TARGET = 'CHECK_TARGET';\r\nexport const SET_SCORE = 'SET_SCORE';\r\nexport const SET_SCORE_BOARD = 'SET_SCORE_BOARD';","import React from 'react';\r\n\r\nexport default props => <li\r\n    style={{\r\n        ...props.item.coor, \r\n        backgroundColor: props.item.bg,\r\n        width: props.step,\r\n        height: props.step\r\n        }} className=\"snake-part\" ></li>\r\n","import React from 'react';\r\nimport PieceOfSnake from './PieceOfSnake/PieceOfSnake';\r\n\r\nexport default ({snake}) => <ul className=\"snake row\">\r\n    {snake.pieces.map(item => <PieceOfSnake key={item.id} item={item} step={snake.step} />)}\r\n</ul >\r\n","import React from 'react';\r\nimport appleImg from '../../../assets/img/apple.png'\r\n\r\nexport default props => <div className=\"target\" style={{ ...props.target.coor }}>\r\n    <img src={appleImg} style={{width: props.step, height: props.step}} alt=\"\" />\r\n</div>","import React from 'react';\r\n\r\nexport default ({ input, meta, ...props }) => <>\r\n    <input {...input} {...props} />\r\n    {meta.touched && meta.error &&\r\n        <small className=\"error-alert\" role=\"alert\">* {meta.error}</small>}\r\n    <div className=\"input-group-append\">\r\n        <button className=\"btn btn-outline-light\" type=\"submit\" id=\"button-addon\" disabled={meta.error && true}>OK</button>\r\n    </div>\r\n</>\r\n","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { minLength, required } from './../../../../utils/validators';\r\nimport InputName from './InputName/InputName';\r\n\r\nlet minLength3 = minLength(3);\r\n\r\nconst ScoreNameForm = props => <form onSubmit={props.handleSubmit}>\r\n        <div className=\"input-group my-3\">\r\n            <Field component={InputName} placeholder=\"Name\" name=\"name\" validate={[required, minLength3]}\r\n                type=\"text\" className=\"form-control\"\r\n                aria-label=\"Recipient's username\" aria-describedby=\"button-addon\" />\r\n        </div>\r\n    </form>\r\n\r\nexport default reduxForm({ form: 'scoreName' })(ScoreNameForm)\r\n","import React from 'react';\r\nimport ScoreNameForm from './ScoreNameForm/ScoreNameForm';\r\n\r\nexport default props => {\r\n\r\n    const addScoreName = (values) => {\r\n        props.sendScore(values.name, props.score.points);\r\n        props.initTimer();\r\n    }\r\n\r\n    return <div className=\"game-over row align-items-center justify-content-center\">\r\n        <div>\r\n            <h1 className=\"display-4 m-3\">GAME OVER</h1>\r\n            Your score {props.score.points}\r\n            <ScoreNameForm onSubmit={addScoreName} />\r\n            <div className=\"col-12 mt-5\">\r\n                <button className=\"btn btn-outline-light btn-lg\" onClick={() => props.initTimer()} >Try again</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://snake-fa6cd.firebaseio.com/\"\r\n})\r\n\r\nexport const scoreAPI = {\r\n    sendScore(name, score) {\r\n        return instance.post(\"scoreBoard.json\", {name, score} )\r\n    },\r\n\r\n    getScores() {\r\n        return instance.get(\"scoreBoard.json\").then(response => response.data)\r\n    }\r\n}","import { SET_SCORE, SET_SCORE_BOARD } from \"./types\"\r\nimport { scoreAPI } from './../api/api';\r\n\r\nconst initState = {\r\n    points: 3\r\n}\r\n\r\nconst scoreReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case SET_SCORE:\r\n            return {\r\n                ...state,\r\n                points: action.score\r\n            }\r\n\r\n        case SET_SCORE_BOARD:\r\n            return {\r\n                ...state,\r\n                scoreBoard: action.data.sort((a, b) => b.score - a.score).map((item, i) => {\r\n                    item.pos = i + 1;\r\n                    return item\r\n                })\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default scoreReducer\r\n\r\nexport let setScore = score => ({ type: SET_SCORE, score })\r\nlet setScoreBoard = data => ({ type: SET_SCORE_BOARD, data })\r\n\r\nexport const sendScore = (name, points) => dispatch => {\r\n    scoreAPI.sendScore(name, points);\r\n}\r\n\r\nexport const getScoreBoard = () => dispatch => {\r\n    scoreAPI.getScores()\r\n        .then(data => {\r\n            data && dispatch(setScoreBoard([...Object.values(data)]))\r\n        })\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setDirection, stopTimer, initTimer, setTarget } from '../../redux/snakeReducer';\r\nimport Snake from './Snake/Snake';\r\nimport Target from './Target/Target';\r\nimport GameOver from './GameOver/GameOver';\r\nimport { setScore, sendScore  } from '../../redux/scoreReducer';\r\n\r\nclass FieldContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.initTimer();\r\n    }\r\n\r\n    handleOnKeyDown = event => {\r\n\r\n        if (this.props.snake.lock) return;\r\n        \r\n        switch (event.key) {\r\n            case 'ArrowUp': this.props.setDirection('up'); break;\r\n            case 'ArrowRight': this.props.setDirection('right'); break;\r\n            case 'ArrowDown': this.props.setDirection('down'); break;\r\n            case 'ArrowLeft': this.props.setDirection('left'); break;\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        this.props.snake.gameOver && this.props.stopTimer();\r\n        if (this.props.snake.target.goal) {\r\n            this.props.setTarget();\r\n            this.props.setScore(this.props.snake.pieces.length);\r\n        } \r\n\r\n        return <div className=\"field mx-auto mt-1\" tabIndex=\"-1\" \r\n            style={{ ...this.props.snake.field }}\r\n            onKeyDown={this.handleOnKeyDown} autofocus=\"true\" >\r\n\r\n            <small className=\"small-score\" >{this.props.score.points}</small>\r\n            <Snake snake={this.props.snake} />\r\n            {this.props.snake.target && <Target target={this.props.snake.target} step={this.props.snake.step} />}\r\n            {this.props.snake.gameOver && <GameOver {...this.props} />}\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    snake: state.snake,\r\n    score: state.score\r\n})\r\n\r\nexport default connect(mapStateToProps, \r\n    { setDirection, initTimer, stopTimer, setTarget, setScore, sendScore })(FieldContainer)\r\n\r\n","import React from 'react';\r\n\r\nexport default () => <nav className=\"navbar navbar-dark bg-secondary\">\r\n    <span className=\"navbar-brand mb-0 h1\">Snake</span>\r\n    <span className=\"navbar-text\">Developed by O. Tyshchenko</span>\r\n</nav>","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Alert = ({ field }) => <div className=\"alert alert-info alert-dismissible fade show mx-auto my-2\" role=\"alert\"\r\n    style={{ width: field.width }}>\r\n    Use <strong>arrows</strong> on your keyboard to control the snake\r\n    <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n\r\nconst mapStateToProps = state => ({\r\n    field: state.snake.field\r\n})\r\n\r\nexport default connect(mapStateToProps)(Alert)","import React from 'react';\r\n\r\nexport default ({ item }) => <li className=\"buddy-score row align-items-center w-100\">\r\n    <span className=\"col-2\">{item.pos}</span>\r\n    <span className=\"col-7\">{item.name}</span>\r\n    <span className=\"col\">{item.score}</span>\r\n</li>\r\n","import React from 'react';\r\nimport Buddy from './Buddy/Buddy';\r\n\r\nexport default props => <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div className=\"modal-dialog\" role=\"document\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Scoreboard</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <ul>\r\n                    <li className=\"buddy-score row align-items-center w-100 pb-2\">\r\n                        <span className=\"col-2\"><strong>#</strong></span>\r\n                        <span className=\"col-7\"><strong>Name</strong></span>\r\n                        <span className=\"col\"><strong>Score</strong></span>\r\n                    </li>\r\n                    {props.score.scoreBoard &&\r\n                        props.score.scoreBoard.map(item => <Buddy item={item} key={item.pos} />)\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getScoreBoard } from '../../redux/scoreReducer';\r\nimport ScoreBoardModal from './ScoreBoardModal';\r\n\r\nclass ScoreBoardContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getScoreBoard();\r\n    }\r\n\r\n    render() {\r\n        return <div style={{ width: this.props.field.width }} className=\"m-auto\">\r\n\r\n        <button type=\"button\" className=\"btn btn-info mt-2 w-100\" data-toggle=\"modal\" data-target=\"#exampleModal\">\r\n            Show scoreboard\r\n        </button>\r\n    \r\n        <ScoreBoardModal {...this.props} />\r\n    </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    score: state.score,\r\n    field: state.snake.field\r\n})\r\n\r\nexport default connect(mapStateToProps, {getScoreBoard})(ScoreBoardContainer)","import React from 'react';\nimport './App.scss';\nimport SnakeField from './components/SnakeField/Field';\nimport Header from './components/Header/Header';\nimport Alert from './components/Alert/Alert';\nimport ScoreBoardContainer from './components/ScoreBoard/ScoreBoardContainer';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Alert />\n      <SnakeField />\n      <ScoreBoardContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport snakeReducer from './snakeReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport scoreReducer from \"./scoreReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    snake: snakeReducer,\r\n    score: scoreReducer,\r\n    form: formReducer\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/apple.03526336.png\";"],"sourceRoot":""}